{"ast":null,"code":"// userUtils.js\n\n/**\r\n * Получение профиля пользователя из localStorage\r\n * @returns {Object|null} Профиль пользователя или null, если профиль не найден\r\n */\nexport const getUserProfile = () => {\n  const userProfile = localStorage.getItem('userProfile');\n  return userProfile ? JSON.parse(userProfile) : null;\n};\n\n/**\r\n * Сохранение профиля пользователя в localStorage\r\n * @param {Object} profile - Объект профиля пользователя\r\n */\nexport const saveUserProfile = profile => {\n  localStorage.setItem('userProfile', JSON.stringify(profile));\n};\n\n/**\r\n * Добавление заказа в историю заказов пользователя\r\n * @param {Array} cartItems - Список товаров из корзины\r\n */\nexport const addOrderToUserHistory = cartItems => {\n  const userProfile = getUserProfile();\n  if (!userProfile) {\n    console.error('Профиль пользователя не найден');\n    return;\n  }\n  const newOrder = {\n    id: Date.now(),\n    // Уникальный идентификатор заказа\n    date: new Date().toISOString().split('T')[0],\n    // Текущая дата в формате YYYY-MM-DD\n    items: cartItems.map(item => ({\n      name: item.name,\n      size: item.size,\n      price: item.price,\n      quantity: item.quantity\n    })),\n    total: cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0)\n  };\n\n  // Обновление истории заказов\n  const updatedOrders = userProfile.orders ? [...userProfile.orders, newOrder] : [newOrder];\n  const updatedProfile = {\n    ...userProfile,\n    orders: updatedOrders\n  };\n\n  // Сохранение обновлённого профиля\n  saveUserProfile(updatedProfile);\n};\n\n/**\r\n * Очистка истории заказов пользователя\r\n */\nexport const clearUserOrderHistory = () => {\n  const userProfile = getUserProfile();\n  if (!userProfile) {\n    console.error('Профиль пользователя не найден');\n    return;\n  }\n  const updatedProfile = {\n    ...userProfile,\n    orders: []\n  };\n  saveUserProfile(updatedProfile);\n};","map":{"version":3,"names":["getUserProfile","userProfile","localStorage","getItem","JSON","parse","saveUserProfile","profile","setItem","stringify","addOrderToUserHistory","cartItems","console","error","newOrder","id","Date","now","date","toISOString","split","items","map","item","name","size","price","quantity","total","reduce","sum","updatedOrders","orders","updatedProfile","clearUserOrderHistory"],"sources":["C:/Users/79818/shop1/src/components/utils/userUtils.js"],"sourcesContent":["// userUtils.js\r\n\r\n/**\r\n * Получение профиля пользователя из localStorage\r\n * @returns {Object|null} Профиль пользователя или null, если профиль не найден\r\n */\r\nexport const getUserProfile = () => {\r\n  const userProfile = localStorage.getItem('userProfile');\r\n  return userProfile ? JSON.parse(userProfile) : null;\r\n};\r\n\r\n/**\r\n * Сохранение профиля пользователя в localStorage\r\n * @param {Object} profile - Объект профиля пользователя\r\n */\r\nexport const saveUserProfile = (profile) => {\r\n  localStorage.setItem('userProfile', JSON.stringify(profile));\r\n};\r\n\r\n/**\r\n * Добавление заказа в историю заказов пользователя\r\n * @param {Array} cartItems - Список товаров из корзины\r\n */\r\nexport const addOrderToUserHistory = (cartItems) => {\r\n  const userProfile = getUserProfile();\r\n  if (!userProfile) {\r\n    console.error('Профиль пользователя не найден');\r\n    return;\r\n  }\r\n\r\n  const newOrder = {\r\n    id: Date.now(), // Уникальный идентификатор заказа\r\n    date: new Date().toISOString().split('T')[0], // Текущая дата в формате YYYY-MM-DD\r\n    items: cartItems.map((item) => ({\r\n      name: item.name,\r\n      size: item.size,\r\n      price: item.price,\r\n      quantity: item.quantity,\r\n    })),\r\n    total: cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0),\r\n  };\r\n\r\n  // Обновление истории заказов\r\n  const updatedOrders = userProfile.orders ? [...userProfile.orders, newOrder] : [newOrder];\r\n  const updatedProfile = { ...userProfile, orders: updatedOrders };\r\n\r\n  // Сохранение обновлённого профиля\r\n  saveUserProfile(updatedProfile);\r\n};\r\n\r\n/**\r\n * Очистка истории заказов пользователя\r\n */\r\nexport const clearUserOrderHistory = () => {\r\n  const userProfile = getUserProfile();\r\n  if (!userProfile) {\r\n    console.error('Профиль пользователя не найден');\r\n    return;\r\n  }\r\n\r\n  const updatedProfile = { ...userProfile, orders: [] };\r\n  saveUserProfile(updatedProfile);\r\n};\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMA,cAAc,GAAGA,CAAA,KAAM;EAClC,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EACvD,OAAOF,WAAW,GAAGG,IAAI,CAACC,KAAK,CAACJ,WAAW,CAAC,GAAG,IAAI;AACrD,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMK,eAAe,GAAIC,OAAO,IAAK;EAC1CL,YAAY,CAACM,OAAO,CAAC,aAAa,EAAEJ,IAAI,CAACK,SAAS,CAACF,OAAO,CAAC,CAAC;AAC9D,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMG,qBAAqB,GAAIC,SAAS,IAAK;EAClD,MAAMV,WAAW,GAAGD,cAAc,CAAC,CAAC;EACpC,IAAI,CAACC,WAAW,EAAE;IAChBW,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAC;IAC/C;EACF;EAEA,MAAMC,QAAQ,GAAG;IACfC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;IAAE;IAChBC,IAAI,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAAE;IAC9CC,KAAK,EAAEV,SAAS,CAACW,GAAG,CAAEC,IAAI,KAAM;MAC9BC,IAAI,EAAED,IAAI,CAACC,IAAI;MACfC,IAAI,EAAEF,IAAI,CAACE,IAAI;MACfC,KAAK,EAAEH,IAAI,CAACG,KAAK;MACjBC,QAAQ,EAAEJ,IAAI,CAACI;IACjB,CAAC,CAAC,CAAC;IACHC,KAAK,EAAEjB,SAAS,CAACkB,MAAM,CAAC,CAACC,GAAG,EAAEP,IAAI,KAAKO,GAAG,GAAGP,IAAI,CAACG,KAAK,GAAGH,IAAI,CAACI,QAAQ,EAAE,CAAC;EAC5E,CAAC;;EAED;EACA,MAAMI,aAAa,GAAG9B,WAAW,CAAC+B,MAAM,GAAG,CAAC,GAAG/B,WAAW,CAAC+B,MAAM,EAAElB,QAAQ,CAAC,GAAG,CAACA,QAAQ,CAAC;EACzF,MAAMmB,cAAc,GAAG;IAAE,GAAGhC,WAAW;IAAE+B,MAAM,EAAED;EAAc,CAAC;;EAEhE;EACAzB,eAAe,CAAC2B,cAAc,CAAC;AACjC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EACzC,MAAMjC,WAAW,GAAGD,cAAc,CAAC,CAAC;EACpC,IAAI,CAACC,WAAW,EAAE;IAChBW,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAC;IAC/C;EACF;EAEA,MAAMoB,cAAc,GAAG;IAAE,GAAGhC,WAAW;IAAE+B,MAAM,EAAE;EAAG,CAAC;EACrD1B,eAAe,CAAC2B,cAAc,CAAC;AACjC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}